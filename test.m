I1 = imread('b002.jpg');
I2= rgb2gray(I1);
filename = 'D:\opencv\data\haarcascades/haarcascade_frontalface_alt_tree.xml';
facecls = cv.CascadeClassifier(filename);
facebox = facecls.detect(I2, 'ScaleFactor', 1.03);
filename = 'D:\opencv\data\haarcascades\haarcascade_mcs_nose.xml';
nosecls = cv.CascadeClassifier(filename);
faceROI = uint8(zeros(size(I1)));
faceROI(facebox{1}(2):facebox{1}(2)+facebox{1}(4),facebox{1}(1):facebox{1}(1)+facebox{1}(3),:) = ...
    I1(facebox{1}(2):facebox{1}(2)+facebox{1}(4),facebox{1}(1):facebox{1}(1)+facebox{1}(3),:);
nosebox = nosecls.detect(faceROI);
tmp1 = cv.rectangle(I1, nosebox{1}, 'Color', [100, 100, 14], 'Thickness', 2);
figure(1), imshow(tmp1);
noserows = nosebox{1}(2):nosebox{1}(2)+nosebox{1}(4);
nosecols = nosebox{1}(1):nosebox{1}(1)+nosebox{1}(3);
mask1 = uint8(zeros(size(I2)));
mask1(int16(noserows), int16(nosecols)) = 1;
eyerows = nosebox{1}(2)-2*nosebox{1}(4)/3:nosebox{1}(2);
eyecols = nosebox{1}(1)-nosebox{1}(3)/2:nosebox{1}(1)+3*nosebox{1}(3)/2;
mask2 = uint8(zeros(size(I2)));
mask2(int16(eyerows), int16(eyecols)) = 1;
mouthrows = nosebox{1}(2)+nosebox{1}(4):nosebox{1}(2)+3*nosebox{1}(4)/2;
mouthcols = nosebox{1}(1)-nosebox{1}(3)/4:nosebox{1}(1)+5*nosebox{1}(3)/4;
mask3 = uint8(zeros(size(I2)));
mask3(int16(mouthrows), int16(mouthcols)) = 1;
tmp2(:,:,1) = I1(:,:,1).*mask1;
tmp2(:,:,2) = I1(:,:,2).*mask2;
tmp2(:,:,3) = I1(:,:,3).*mask3;
figure(2), imshow(tmp2);
I3 = cv.equalizeHist(I2);
II = cv.threshold(I3, 25, 'Method', 'BinaryInv');
nose = II.*mask1;
eye = II.*mask2;
mouth = II.*mask3;
matcher = cv.DescriptorMatcher('BruteForce-L1');
eyeref1 = [max(eyerows) min(eyecols)];
eyeref2 = [max(eyerows) max(eyecols)];
[row col val] = find(eye~=0);
eyematches1 = matcher.match(eyeref1, [row col]);
eyematches2 = matcher.match(eyeref2, [row col]);
tmp = cv.circle(I1, [col(int16(eyematches1.trainIdx+1)) row(int16(eyematches1.trainIdx+1))], 3, 'Color', [255, 0, 0]); 
tmp = cv.circle(tmp, [col(int16(eyematches2.trainIdx+1)) row(int16(eyematches2.trainIdx+1))], 3, 'Color', [255, 0, 0]); 
% tmp = cv.circle(tmp, [eyeref1(2) eyeref1(1)], 1, 'Color', [0, 255, 0]); 
% tmp = cv.circle(tmp, [eyeref2(2) eyeref2(1)], 1, 'Color', [0, 255, 0]); 
noseref1 = [max(noserows) min(nosecols)];
noseref2 = [max(noserows) max(nosecols)];
[row col val] = find(nose~=0);
nosematches1 = matcher.match(noseref1, [row col]);
nosematches2 = matcher.match(noseref2, [row col]);
tmp = cv.circle(tmp, [col(int16(nosematches1.trainIdx+1)) row(int16(nosematches1.trainIdx+1))], 3, 'Color', [255, 0, 0]); 
tmp = cv.circle(tmp, [col(int16(nosematches2.trainIdx+1)) row(int16(nosematches2.trainIdx+1))], 3, 'Color', [255, 0, 0]); 
mouthref1 = [min(mouthrows) min(mouthcols)];
mouthref2 = [min(mouthrows) max(mouthcols)];
[row col val] = find(mouth~=0);
mouthmatches1 = matcher.match(mouthref1, [row col]);
mouthmatches2 = matcher.match(mouthref2, [row col]);
tmp = cv.circle(tmp, [col(int16(mouthmatches1.trainIdx+1)) row(int16(mouthmatches1.trainIdx+1))], 3, 'Color', [255, 0, 0]); 
tmp = cv.circle(tmp, [col(int16(mouthmatches2.trainIdx+1)) row(int16(mouthmatches2.trainIdx+1))], 3, 'Color', [255, 0, 0]); 
figure(3), imshow(tmp);
